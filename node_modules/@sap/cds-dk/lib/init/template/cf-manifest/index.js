const path = require('path')
const TemplateBase = require('../templateBase');
const ProjectReader = require('../mta/projectReader')

const { OPTION_CF_MANIFEST } = require('../../constants')
const MANIFEST = 'manifest'
const SERVICES_MANIFEST = 'services-manifest'
const MANIFEST_FILE = MANIFEST + '.yml'
const SERVICES_MANIFEST_FILE = SERVICES_MANIFEST + '.yml'

module.exports = class ManifestTemplate extends TemplateBase {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname)
        this.projectReader = new ProjectReader(this)
    }

    getPriority() {
        return -Number.MAX_VALUE;
    }

    async checkEnabled() {
        if (!this.options.add.has(OPTION_CF_MANIFEST)) {
            return false;
        }

        if (this.options.force) {
            return true;
        }

        if (await this.fsUtil.pathExists(path.join(this.projectPath, MANIFEST_FILE)) || await this.fsUtil.pathExists(path.join(this.projectPath, SERVICES_MANIFEST_FILE))) {
            throw new Error(`File ${MANIFEST_FILE} or ${SERVICES_MANIFEST_FILE} already exist in current folder. Use --force to overwrite.`);
        }
        return true;
    }

    async run() {
        const projectDescriptor = await this.projectReader.read()
        await this.templateUtil.copyFiles('.', this.projectPath, projectDescriptor, this.options.force);
    }
}
