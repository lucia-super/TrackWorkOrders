const { bold } = require('../lib/util/term');

module.exports = Object.assign(login, {
    options: ['--subdomain', '--directory', '--passcode'],
    shortcuts: ['-s', '-d', '-p'],
    flags: ['--plain'],
    get help() {
        const client = require('@sap/cds-sidecar-client')
         const cdsExtendAndCdsActivate = `${bold('cds extend')} and ${bold('cds activate')}`
        const keyring = client.config.keyringDesignation
        return `
# SYNOPSIS

    *cds login* [ <app-url> ]

    Simplifies usage of ${cdsExtendAndCdsActivate} commands related to multitenant
    SaaS applications by providing them with automatic authentication: fetches and
    saves authentication tokens and provides relevant tokens to those commands. 
    
    Saves further settings for the current project (<app-url>, <tenant-subdomain>, and
    URLs for passcodes and tokens).

    *Multiple targets*

    When re-running this command with different app URLs and subdomains, previous
    logins are not affected, allowing simultaneous logins to different API endpoints
    on SAP Cloud Platform, Cloud Foundry environment.
    ${cdsExtendAndCdsActivate} will be authenticated according to the given target.

    If the Cloud-Foundry command-line client is installed, the SaaS-app URL <app-url> 
    may be omitted. In that case, suitable apps from the org and space you're currently 
    logged in to will be presented to determine <app-url>.
    
    In case <app-url> does not start with a schema, 'https://' is assumed.
    
    *Token Expiration*

    If a refresh token has been provided with the original token and the original 
    token has expired, it will be automatically renewed.
    
    *Storing Authentication Data*

    Authentication data for all logins is saved by <app-url> and <tenant-subdomain> in the
    desktop keyring (${keyring} on your platform) or, if requested, in config
    file ${client.config.paths.auth}.
    
    To make use of keyring storage, the 'keytar' Node.js module must be installed.
    A corresponding hint will be given in case the module is not found.
    
    Project settings are saved by project directory in config file
    ${client.config.paths.settings}.
    
    Note that local storage of authentication data incurs a certain security risk:
    a malicious locally-running application might be able to perform any action with
    the SaaS app that you are authorized for with respect to your tenant.


# OPTIONS
   
    *-s* | *--subdomain* <tenant-subdomain>
    
        The subdomain to log in to. Can also be provided by project settings.
        Alternatively it will be determined by invoking the CF client and
        interpreting its output by reference to the <app-url>.
   
    *-d* | *--directory* <extension-project-directory>
    
        The extension-project folder (relevant for loading and saving settings).
        If omitted, a subdirectory named as the subdomain or the current working
        directory will be used.

    *-p* | *--passcode* <passcode>
    
        The tenant-specific passcode for authentication.

    *--plain*
    
        Instead of saving authentication data for this login to the desktop keyring,
        use plain-text storage, e.g. if you have not installed the 'keytar' module.
        Note, that this is not recommended as it decreases the level of security: at
        least applications running as the current user can read this file, whereas
        the keyring (depending on the platform) can be locked and unlocked on owner
        request and may hide data saved by this command from other applications you run.
        
        During any login, potential pre-existing authentication data for the same
        target is deleted from the other, non-selected storage. This allows
        migrating authentication data from one storage to the other by running
        the present command without a passcode.
`;
    }})


async function login ([url], options = {}) {
    Object.assign(options, {
        url,
        tokenStorage: options.plain ? 'plain' : 'keyring',
        renewLogin: true
    })

    const client = require('@sap/cds-sidecar-client')
    client.login(options)
}


/* eslint no-console: off */
